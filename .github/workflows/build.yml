name: Build and Release
permissions:
    contents: write

on:
    push:
        branches:
            - main
        tags:
            - "v*"

env:
    REGISTRY: quay.io
    REPOSITORY: ${{ vars.REPOSITORY }}
    OPERATOR_IMAGE: ${{ vars.REGISTRY }}/${{ vars.REPOSITORY }}/automotive-dev-operator
    AIB_BASE_IMAGE: ${{ vars.REGISTRY }}/${{ vars.REPOSITORY }}/aib-base-dev
    VERSION: ${{ github.sha }}
    AIB_CLI_BINARY: "caib"

jobs:
    build-operator-arm64:
        runs-on: ubuntu-24.04-arm
        steps:
            - uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to Quay.io
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ secrets.REGISTRY_USER }}
                  password: ${{ secrets.REGISTRY_PASSWORD }}

            - name: Build and push operator (ARM64)
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: Dockerfile
                  platforms: linux/arm64
                  push: true
                  tags: |
                      ${{ env.OPERATOR_IMAGE }}:${{ env.VERSION }}-arm64
                      ${{ env.OPERATOR_IMAGE }}:latest-arm64
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    build-operator-amd64:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to Quay.io
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ secrets.REGISTRY_USER }}
                  password: ${{ secrets.REGISTRY_PASSWORD }}

            - name: Build and push operator (AMD64)
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: Dockerfile
                  platforms: linux/amd64
                  push: true
                  tags: |
                      ${{ env.OPERATOR_IMAGE }}:${{ env.VERSION }}-amd64
                      ${{ env.OPERATOR_IMAGE }}:latest-amd64
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    create-multiarch-manifest:
        needs: [build-operator-arm64, build-operator-amd64]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to Quay.io
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ secrets.REGISTRY_USER }}
                  password: ${{ secrets.REGISTRY_PASSWORD }}

            - name: Create and push multi-arch manifest
              run: |
                  docker buildx imagetools create -t ${{ env.OPERATOR_IMAGE }}:${{ env.VERSION }} \
                  ${{ env.OPERATOR_IMAGE }}:${{ env.VERSION }}-amd64 \
                  ${{ env.OPERATOR_IMAGE }}:${{ env.VERSION }}-arm64
                  docker buildx imagetools create -t ${{ env.OPERATOR_IMAGE }}:latest \
                  ${{ env.OPERATOR_IMAGE }}:latest-amd64 \
                  ${{ env.OPERATOR_IMAGE }}:latest-arm64

    build-caib-arm64:
        runs-on: ubuntu-24.04-arm
        if: startsWith(github.ref, 'refs/tags/')
        steps:
            - uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: "1.23"

            - name: Build CLI for ARM64
              run: |
                  mkdir -p ./bin
                  make build-caib VERSION=${{ github.ref_name }}
                  cp bin/caib ${AIB_CLI_BINARY}-${{ github.ref_name }}-arm64

            - name: Upload ARM64 artifact
              uses: actions/upload-artifact@v4
              with:
                  name: caib-arm64
                  path: ${{ env.AIB_CLI_BINARY }}-${{ github.ref_name }}-arm64
                  retention-days: 7
                  compression-level: 0
                  if-no-files-found: error

    build-caib-amd64:
        runs-on: ubuntu-latest
        if: startsWith(github.ref, 'refs/tags/')
        steps:
            - uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: "1.23"

            - name: Build CLI for AMD64
              run: |
                  mkdir -p ./bin
                  GOARCH=amd64 make build-caib VERSION=${{ github.ref_name }}
                  cp bin/caib ${AIB_CLI_BINARY}-${{ github.ref_name }}-amd64

            - name: Upload AMD64 artifact
              uses: actions/upload-artifact@v4
              with:
                  name: caib-amd64
                  path: ${{ env.AIB_CLI_BINARY }}-${{ github.ref_name }}-amd64
                  retention-days: 7
                  compression-level: 0
                  if-no-files-found: error

    create-release:
        permissions:
            contents: write
        needs: [build-caib-arm64, build-caib-amd64]
        runs-on: ubuntu-latest
        if: startsWith(github.ref, 'refs/tags/')
        steps:
            - name: Download ARM64 artifact
              uses: actions/download-artifact@v4
              with:
                  name: caib-arm64

            - name: Download AMD64 artifact
              uses: actions/download-artifact@v4
              with:
                  name: caib-amd64

            - name: Create Release
              id: create_release
              uses: softprops/action-gh-release@v1
              with:
                  files: |
                      ${{ env.AIB_CLI_BINARY }}-${{ github.ref_name }}-arm64
                      ${{ env.AIB_CLI_BINARY }}-${{ github.ref_name }}-amd64
                  name: Release ${{ github.ref_name }}
                  body: |
                      Automotive Image Builder CLI ${{ github.ref_name }}
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
